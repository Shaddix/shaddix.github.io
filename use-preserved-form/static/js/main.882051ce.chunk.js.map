{"version":3,"sources":["../../use-preserved-form/dist/index.js","../../use-preserved-form/dist/usePreservedForm.js","Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Object","defineProperty","exports","value","usePreservedForm_1","require","usePreservedForm","__importStar","this","mod","__esModule","result","k","hasOwnProperty","call","react_1","react_hook_form_1","formName","optionsParam","options","getValuesRef","default","useRef","saveValuesFactory","useCallback","current","currentValues","localStorage","setItem","JSON","stringify","useEffect","jsonInitialValues","getItem","defaultValues","parse","form","useForm","handleChange","fieldName","fields","control","fieldsRef","key","fieldRef","ref","addEventListener","removeEventListener","getValues","reset","props","console","log","saveValuesFunction","Form","onSubmit","handleSubmit","data","onReset","name","register","type","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,IAAIC,EAAqBC,EAAQ,IACjCH,EAAQI,iBAAmBF,EAAmBE,kB,sGCF9C,IAAIC,EACDC,MAAQA,KAAKD,cACd,SAAUE,GACR,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIE,EAAS,GACb,GAAW,MAAPF,EACF,IAAK,IAAIG,KAAKH,EACRT,OAAOa,eAAeC,KAAKL,EAAKG,KAAID,EAAOC,GAAKH,EAAIG,IAE5D,OADAD,EAAM,QAAcF,EACbE,GAEXX,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,IAAIY,EAAUR,EAAaF,EAAQ,IAC/BW,EAAoBX,EAAQ,IAoEhCH,EAAQI,iBAhER,SAA0BW,EAAUC,GAClC,IAAIC,EACe,OAAjBD,QAA0C,IAAjBA,EAA0BA,EAAe,GAChEE,EAAeL,EAAQM,QAAQC,OAAO,MACtCC,EAAoBR,EAAQS,aAC9B,WACE,OAAO,WACL,GAAIJ,EAAaK,QAAS,CACxB,IAAIC,EAAgBN,EAAaK,UACjCE,aAAaC,QAAQX,EAAUY,KAAKC,UAAUJ,QAIpD,CAACT,IAGHF,EAAQM,QAAQU,UAAUR,EAAmB,IAC7C,IAAIS,EAAoBL,aAAaM,QAAQhB,GACzCe,IACFb,EAAQe,cAAgBL,KAAKM,MAAMH,IAErC,IAAII,EAAOpB,EAAkBqB,QAAQlB,GACjCmB,EAAevB,EAAQS,aAAY,SAAUe,GAC/ChB,QACC,IACCiB,EAASJ,EAAKK,QAAQC,UAAUjB,QACpCV,EAAQgB,WACN,WACE,IAAK,IAAIY,KAAOH,EAAQ,CACtB,IAAII,EAAWJ,EAAOG,GAAKE,IAC3BD,EAASE,iBAAiB,OAAQR,GAClCM,EAASE,iBAAiB,QAASR,GAErC,OAAO,WACL,IAAK,IAAIK,KAAOH,EAAQ,CACtB,IAAII,EAAWJ,EAAOG,GAAKE,IAC3BD,EAASG,oBAAoB,QAAST,GACtCM,EAASG,oBAAoB,OAAQT,OAI3C,CAACE,IAGHjB,MAEAR,EAAQM,QAAQU,WACd,WACEX,EAAaK,QAAUW,EAAKY,YAE9B,CAACZ,EAAKY,YAER,IAAIC,EAAQb,EAAKa,MAUjB,OATAb,EAAKa,MAAQlC,EAAQS,aACnB,SAAU0B,GACRD,EAAMC,GACNC,QAAQC,IAAI,SACa7B,GACzB8B,KAEF,CAACJ,EAAO1B,IAEHa,I,+FCxEIkB,EAAiB,SAACJ,GAC7B,IAAMd,EAAO9B,2BAA2B,YAMxC,OACE,6BACE,0BAAMiD,SAAUnB,EAAKoB,cANR,SAACC,GAChBrB,EAAKa,QACLE,QAAQC,IAAIK,MAImCC,QAAS,kBAAMtB,EAAKa,UAC/D,qCAEE,2BAAOU,KAAK,OAAOd,IAAKT,EAAKwB,YAE/B,yCAEE,2BAAOD,KAAK,WAAWd,IAAKT,EAAKwB,YAEnC,6BACE,2BAAOC,KAAK,SAAS1D,MAAM,WAC3B,2BAAO0D,KAAK,QAAQ1D,MAAM,cChBrB2D,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.882051ce.chunk.js","sourcesContent":["'use strict';\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\nvar usePreservedForm_1 = require('./usePreservedForm');\r\nexports.usePreservedForm = usePreservedForm_1.usePreservedForm;\r\n","'use strict';\r\nvar __importStar =\r\n  (this && this.__importStar) ||\r\n  function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null)\r\n      for (var k in mod)\r\n        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result['default'] = mod;\r\n    return result;\r\n  };\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\nvar react_1 = __importStar(require('react'));\r\nvar react_hook_form_1 = require('react-hook-form');\r\n/*\r\n  Preserves react-hook-form between unmount/mount cycles.\r\n */\r\nfunction usePreservedForm(formName, optionsParam) {\r\n  var options =\r\n    optionsParam !== null && optionsParam !== void 0 ? optionsParam : {};\r\n  var getValuesRef = react_1.default.useRef(null);\r\n  var saveValuesFactory = react_1.useCallback(\r\n    function () {\r\n      return function () {\r\n        if (getValuesRef.current) {\r\n          var currentValues = getValuesRef.current();\r\n          localStorage.setItem(formName, JSON.stringify(currentValues));\r\n        }\r\n      };\r\n    },\r\n    [formName],\r\n  );\r\n  // preserve values on unmount\r\n  react_1.default.useEffect(saveValuesFactory, []);\r\n  var jsonInitialValues = localStorage.getItem(formName);\r\n  if (jsonInitialValues) {\r\n    options.defaultValues = JSON.parse(jsonInitialValues);\r\n  }\r\n  var form = react_hook_form_1.useForm(options);\r\n  var handleChange = react_1.useCallback(function (fieldName) {\r\n    saveValuesFactory()();\r\n  }, []);\r\n  var fields = form.control.fieldsRef.current;\r\n  react_1.useEffect(\r\n    function () {\r\n      for (var key in fields) {\r\n        var fieldRef = fields[key].ref;\r\n        fieldRef.addEventListener('blur', handleChange);\r\n        fieldRef.addEventListener('input', handleChange);\r\n      }\r\n      return function () {\r\n        for (var key in fields) {\r\n          var fieldRef = fields[key].ref;\r\n          fieldRef.removeEventListener('input', handleChange);\r\n          fieldRef.removeEventListener('blur', handleChange);\r\n        }\r\n      };\r\n    },\r\n    [fields],\r\n  );\r\n  // eslint-disable-next-line\r\n  saveValuesFactory()();\r\n  // Save getValues reference on each rerender\r\n  react_1.default.useEffect(\r\n    function () {\r\n      getValuesRef.current = form.getValues;\r\n    },\r\n    [form.getValues],\r\n  );\r\n  var reset = form.reset;\r\n  form.reset = react_1.useCallback(\r\n    function (props) {\r\n      reset(props);\r\n      console.log('reset');\r\n      var saveValuesFunction = saveValuesFactory();\r\n      saveValuesFunction();\r\n    },\r\n    [reset, saveValuesFactory],\r\n  );\r\n  return form;\r\n}\r\nexports.usePreservedForm = usePreservedForm;\r\n","import React from 'react';\r\nimport { usePreservedForm } from 'use-preserved-form';\r\n\r\ntype FormData = {\r\n  name: string;\r\n  lastName: string;\r\n};\r\n\r\nexport const Form: React.FC = (props) => {\r\n  const form = usePreservedForm<FormData>('mainForm');\r\n\r\n  const onSubmit = (data: FormData) => {\r\n    form.reset();\r\n    console.log(data);\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} onReset={() => form.reset()}>\r\n        <div>\r\n          Name:\r\n          <input name=\"name\" ref={form.register} />\r\n        </div>\r\n        <div>\r\n          LastName:\r\n          <input name=\"lastName\" ref={form.register} />\r\n        </div>\r\n        <div>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n          <input type=\"reset\" value=\"Reset\" />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { Form } from './Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}